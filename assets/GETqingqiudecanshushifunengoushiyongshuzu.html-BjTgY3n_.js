import{_ as s,o as a,c as t,a as p}from"./app-DZEN4s8q.js";const e={};function o(c,n){return a(),t("div",null,n[0]||(n[0]=[p(`<p>GET 请求的参数可以使用数组。</p><p>虽然在 URL 查询字符串中直接表示数组略有复杂，但有几种常见的方式来实现数组的传递。以下是一些常见的处理数组参数的方法：</p><h3 id="_1-使用重复的参数名" tabindex="-1"><a class="header-anchor" href="#_1-使用重复的参数名"><span>1. 使用重复的参数名</span></a></h3><p>最简单的方法是使用重复的参数名，每个数组元素作为一个独立的参数传递。例如，传递一个数组 <code>[1, 2, 3]</code> 可以表示为： <code>?numbers=1&amp;numbers=2&amp;numbers=3</code> 这种方式常见于许多后端框架和库，它们能够解析这种格式的参数。</p><h3 id="_2-使用方括号表示法" tabindex="-1"><a class="header-anchor" href="#_2-使用方括号表示法"><span>2. 使用方括号表示法</span></a></h3><p>在一些编程环境中，可以使用方括号表示法来传递数组，这种方式可以表示嵌套的数组和对象。例如： <code>?numbers[]=1&amp;numbers[]=2&amp;numbers[]=3</code> 这种方式在 PHP 和 Ruby 等语言中非常常见，它们能够解析这样的查询字符串。</p><h3 id="_3-使用逗号分隔的字符串" tabindex="-1"><a class="header-anchor" href="#_3-使用逗号分隔的字符串"><span>3. 使用逗号分隔的字符串</span></a></h3><p>另一种常见的方法是将数组元素用逗号或其他分隔符连接成一个字符串。例如： <code>?numbers=1,2,3</code> 在服务器端，需要将这个字符串分隔开来以恢复原始数组。这种方式在 JavaScript 中也比较常见，尤其是当数组的顺序不需要保留时。</p><h3 id="_4-使用-json-字符串" tabindex="-1"><a class="header-anchor" href="#_4-使用-json-字符串"><span>4. 使用 JSON 字符串</span></a></h3><p>在一些情况下，可以将数组序列化为 JSON 字符串进行传递。例如： <code>?numbers=%5B1%2C2%2C3%5D</code> 这里的 <code>%5B</code>, <code>%2C</code>, 和 <code>%5D</code> 是 URL 编码形式的 <code>[</code>，<code>,</code> 和 <code>]</code>。在服务器端，需将 JSON 字符串解析回数组。</p><p>示例代码</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 使用重复的参数名</span></span>
<span class="line"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> queryString <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">numbers=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://example.com?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>queryString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用方括号表示法</span></span>
<span class="line"><span class="token keyword">const</span> queryStringBrackets <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">numbers[]=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> urlBrackets <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://example.com?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>queryStringBrackets<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用逗号分隔的字符串</span></span>
<span class="line"><span class="token keyword">const</span> queryStringComma <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">numbers=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>array<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> urlComma <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://example.com?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>queryStringComma<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 JSON 字符串</span></span>
<span class="line"><span class="token keyword">const</span> queryStringJSON <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">numbers=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> urlJSON <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://example.com?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>queryStringJSON<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端示例（Node.js Express）：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 使用重复的参数名</span></span>
<span class="line">  <span class="token keyword">const</span> numbers <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>numbers<span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3] - 自动解析为数组</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 使用方括号表示法</span></span>
<span class="line">  <span class="token keyword">const</span> numbersBrackets <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">[</span><span class="token string">&#39;numbers[]&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3] - 自动解析为数组</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 使用逗号分隔的字符串</span></span>
<span class="line">  <span class="token keyword">const</span> numbersComma <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;] - 需要转换为数字数组</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 使用 JSON 字符串</span></span>
<span class="line">  <span class="token keyword">const</span> numbersJSON <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)]))}const i=s(e,[["render",o],["__file","GETqingqiudecanshushifunengoushiyongshuzu.html.vue"]]),u=JSON.parse('{"path":"/blogs/HTTP/qingqiu/GETqingqiudecanshushifunengoushiyongshuzu.html","title":"GET请求的参数是否能够使用数组?","lang":"en-US","frontmatter":{"title":"GET请求的参数是否能够使用数组?","date":"2024/09/11","author":"joker","tags":["前端"],"categories":["HTTP"]},"headers":[{"level":3,"title":"1. 使用重复的参数名","slug":"_1-使用重复的参数名","link":"#_1-使用重复的参数名","children":[]},{"level":3,"title":"2. 使用方括号表示法","slug":"_2-使用方括号表示法","link":"#_2-使用方括号表示法","children":[]},{"level":3,"title":"3. 使用逗号分隔的字符串","slug":"_3-使用逗号分隔的字符串","link":"#_3-使用逗号分隔的字符串","children":[]},{"level":3,"title":"4. 使用 JSON 字符串","slug":"_4-使用-json-字符串","link":"#_4-使用-json-字符串","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"blogs/HTTP/请求/GET请求的参数是否能够使用数组.md"}');export{i as comp,u as data};
