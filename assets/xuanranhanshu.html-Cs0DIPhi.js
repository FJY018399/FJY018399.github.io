import{_ as l,r as o,o as i,c,a as p,b as s,d as e,e as t}from"./app-DZEN4s8q.js";const r={},u={href:"https://cn.vuejs.org/guide/extras/render-function.html#creating-vnodes",target:"_blank",rel:"noopener noreferrer"},d={href:"https://cn.vuejs.org/guide/extras/render-function.html#components",target:"_blank",rel:"noopener noreferrer"},k={href:"https://cn.vuejs.org/guide/extras/render-function.html#custom-directives",target:"_blank",rel:"noopener noreferrer"},v={href:"https://cn.vuejs.org/guide/extras/render-function.html#custom-directives",target:"_blank",rel:"noopener noreferrer"},m={href:"https://cn.vuejs.org/guide/extras/render-function.html#event-modifiers",target:"_blank",rel:"noopener noreferrer"};function g(b,n){const a=o("ExternalLinkIcon");return i(),c("div",null,[n[9]||(n[9]=p(`<h2 id="h" tabindex="-1"><a class="header-anchor" href="#h"><span>h()</span></a></h2><p>创建虚拟 DOM 节点 (vnode)。</p><ul><li><strong>类型</strong></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">  <span class="token comment">// 完整参数签名</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Component<span class="token punctuation">,</span></span>
<span class="line">  props<span class="token operator">?</span><span class="token operator">:</span> object <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  children<span class="token operator">?</span><span class="token operator">:</span> Children <span class="token operator">|</span> Slot <span class="token operator">|</span> Slots</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> VNode</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 省略 props</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Component<span class="token punctuation">,</span> children<span class="token operator">?</span><span class="token operator">:</span> Children <span class="token operator">|</span> Slot<span class="token punctuation">)</span><span class="token operator">:</span> VNode</span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Children</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> VNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> Children<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Slot</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Children</span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Slots</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> Slot <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>为了便于阅读，对类型进行了简化</p></blockquote><ul><li><strong>详细信息</strong> 第一个参数既可以是一个字符串 (用于原生元素) 也可以是一个 Vue 组件定义。第二个参数是要传递的 prop，第三个参数是子节点。</li></ul><p>当创建一个组件的 vnode 时，子节点必须以插槽函数进行传递。如果组件只有默认槽，可以使用单个插槽函数进行传递。否则，必须以插槽函数的对象形式来传递。</p><p>为了方便阅读，当子节点不是插槽对象时，可以省略 prop 参数。</p><ul><li><strong>示例</strong> 创建原生元素：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 除了 type 外，其他参数都是可选的</span></span>
<span class="line"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// attribute 和 property 都可以用于 prop</span></span>
<span class="line"><span class="token comment">// Vue 会自动选择正确的方式来分配它</span></span>
<span class="line"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">innerHTML</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// class 与 style 可以像在模板中一样</span></span>
<span class="line"><span class="token comment">// 用数组或对象的形式书写</span></span>
<span class="line"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> <span class="token punctuation">{</span> bar <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 事件监听器应以 onXxx 的形式书写</span></span>
<span class="line"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// children 可以是一个字符串</span></span>
<span class="line"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 没有 prop 时可以省略不写</span></span>
<span class="line"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// children 数组可以同时包含 vnode 和字符串</span></span>
<span class="line"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建组件：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> Foo <span class="token keyword">from</span> <span class="token string">&#39;./Foo.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 传递 prop</span></span>
<span class="line"><span class="token function">h</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 等价于 some-prop=&quot;hello&quot;</span></span>
<span class="line">  <span class="token literal-property property">someProp</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 等价于 @update=&quot;() =&gt; {}&quot;</span></span>
<span class="line">  <span class="token function-variable function">onUpdate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 传递单个默认插槽</span></span>
<span class="line"><span class="token function">h</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;default slot&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 传递具名插槽</span></span>
<span class="line"><span class="token comment">// 注意，需要使用 \`null\` 来避免</span></span>
<span class="line"><span class="token comment">// 插槽对象被当作是 prop</span></span>
<span class="line"><span class="token function">h</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;default slot&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">bar</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;one&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),s("ul",null,[s("li",null,[s("a",u,[n[0]||(n[0]=e("参考指南 - 渲染函数 - 创建 VNode")),t(a)])])]),n[10]||(n[10]=p(`<h2 id="mergeprops" tabindex="-1"><a class="header-anchor" href="#mergeprops"><span>mergeProps()</span></a></h2><p>合并多个 props 对象，用于处理含有特定的 props 参数的情况。</p><ul><li><strong>类型</strong></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">mergeProps</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> object</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><strong>详细信息</strong></p><p><code>mergeProps</code> 会将多个对象合并为一个对象，并返回合并后的对象。如果多个对象具有相同的键，则后面的对象的值会覆盖前面的对象的值。</p><ul><li><code>class</code></li><li><code>style</code></li><li><code>onXxx</code>事件监听器——多个同名的事件监听器将被合并到一个数组。 如果你不需要合并行为而是简单覆盖，可以使用原生 object spread 语法来代替。</li></ul></li><li><p><strong>示例</strong></p></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> mergeProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">onClick</span><span class="token operator">:</span> handlerA</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> two <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">class</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">onClick</span><span class="token operator">:</span> handlerB</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> merged <span class="token operator">=</span> <span class="token function">mergeProps</span><span class="token punctuation">(</span>one<span class="token punctuation">,</span> two<span class="token punctuation">)</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> <span class="token punctuation">{</span></span>
<span class="line">   class: &#39;foo bar&#39;,</span>
<span class="line">   onClick: [handlerA, handlerB]</span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clonevnode" tabindex="-1"><a class="header-anchor" href="#clonevnode"><span>cloneVNode()</span></a></h2><p>克隆一个 vnode。</p><ul><li><strong>类型</strong></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">cloneVNode</span><span class="token punctuation">(</span>vnode<span class="token operator">:</span> VNode<span class="token punctuation">,</span> extraProps<span class="token operator">?</span><span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> VNode</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>详细信息</strong> 返回一个克隆的 vnode，可在原有基础上添加一些额外的 prop。</li></ul><p>Vnode 被认为是一旦创建就不能修改的，你不应该修改已创建的 vnode 的 prop，而应该附带不同的/额外的 prop 来克隆它。</p><p>Vnode 具有特殊的内部属性，因此克隆它并不像 object spread 一样简单。<code>cloneVNode()</code> 处理了大部分这样的内部逻辑。</p><ul><li><strong>示例</strong></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> cloneVNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> cloned <span class="token operator">=</span> <span class="token function">cloneVNode</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="isvnode" tabindex="-1"><a class="header-anchor" href="#isvnode"><span>isVNode()</span></a></h2><p>判断一个值是否为 vnode 类型。</p><ul><li><strong>类型</strong></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">isVNode</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="resolvecomponent" tabindex="-1"><a class="header-anchor" href="#resolvecomponent"><span>resolveComponent()</span></a></h2><p>按名称手动解析已注册的组件。</p><ul><li><strong>类型</strong></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">resolveComponent</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Component <span class="token operator">|</span> <span class="token builtin">string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><strong>详细信息</strong><strong>备注：如果你可以直接引入组件就不需使用此方法。</strong> 为了能从正确的组件上下文进行解析，resolveComponent() 必须在setup() 或渲染函数内调用。 如果组件未找到，会抛出一个运行时警告，并返回组件名字符串。</p></li><li><p><strong>示例</strong></p></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> resolveComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> ButtonCounter <span class="token operator">=</span> <span class="token function">resolveComponent</span><span class="token punctuation">(</span><span class="token string">&#39;ButtonCounter&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>ButtonCounter<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25)),s("ul",null,[s("li",null,[n[2]||(n[2]=s("strong",null,"参考",-1)),s("a",d,[n[1]||(n[1]=e("指南 - 渲染函数 - 组件")),t(a)])])]),n[11]||(n[11]=p(`<h2 id="resolvedirective" tabindex="-1"><a class="header-anchor" href="#resolvedirective"><span>resolveDirective()</span></a></h2><p>按名称手动解析已注册的指令。</p><ul><li><strong>类型</strong></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">resolveDirective</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Directive <span class="token operator">|</span> <span class="token keyword">undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>详细信息</strong><strong>备注：如果你可以直接引入指令就不需使用此方法。</strong> 为了能从正确的组件上下文进行解析，<code>resolveDirective()</code> 必须在<code>setup()</code> 或渲染函数内调用。</li></ul><p>如果指令没有找到，会抛出一个运行时警告，并返回 <code>undefined</code>。</p>`,6)),s("ul",null,[s("li",null,[n[4]||(n[4]=s("strong",null,"参考",-1)),s("a",k,[n[3]||(n[3]=e("指南 - 渲染函数 - 子定义指令")),t(a)])])]),n[12]||(n[12]=p(`<h2 id="withdirectives" tabindex="-1"><a class="header-anchor" href="#withdirectives"><span>withDirectives()</span></a></h2><p>用于给 vnode 增加自定义指令。</p><ul><li><strong>类型</strong></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">withDirectives</span><span class="token punctuation">(</span></span>
<span class="line">  vnode<span class="token operator">:</span> VNode<span class="token punctuation">,</span></span>
<span class="line">  directives<span class="token operator">:</span> DirectiveArguments</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> VNode</span>
<span class="line"></span>
<span class="line"><span class="token comment">// [Directive, value, argument, modifiers]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">DirectiveArguments</span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token punctuation">[</span>Directive<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token punctuation">[</span>Directive<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token punctuation">[</span>Directive<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token punctuation">[</span>Directive<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> DirectiveModifiers<span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>详细信息</strong> 用自定义指令包装一个现有的 vnode。第二个参数是自定义指令数组。每个自定义指令也可以表示为 <code>[Directive, value, argument, modifiers]</code> 形式的数组。如果不需要，可以省略数组的尾元素。</p></li><li><p><strong>示例</strong></p></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> withDirectives <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 一个自定义指令</span></span>
<span class="line"><span class="token keyword">const</span> pin <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* ... */</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* ... */</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// &lt;div v-pin:top.animate=&quot;200&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">withDirectives</span><span class="token punctuation">(</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">[</span>pin<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;top&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">animate</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),s("ul",null,[s("li",null,[n[6]||(n[6]=s("strong",null,"参考",-1)),s("a",v,[n[5]||(n[5]=e("指南 - 渲染函数 - 子定义指令")),t(a)])])]),n[13]||(n[13]=p(`<h2 id="withmodifiers" tabindex="-1"><a class="header-anchor" href="#withmodifiers"><span>withModifiers()</span></a></h2><p>用于向事件处理函数添加内置 v-on 修饰符。</p><ul><li><strong>类型</strong></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">withModifiers</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> modifiers<span class="token operator">:</span> ModifierGuardsKeys<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>示例</strong></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> withModifiers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 等价于 v-on:click.stop.prevent</span></span>
<span class="line">  <span class="token literal-property property">onClick</span><span class="token operator">:</span> <span class="token function">withModifiers</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;stop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;prevent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),s("ul",null,[s("li",null,[n[8]||(n[8]=s("strong",null,"参考",-1)),s("a",m,[n[7]||(n[7]=e("指南 - 渲染函数 - 事件修饰符")),t(a)])])])])}const f=l(r,[["render",g],["__file","xuanranhanshu.html.vue"]]),y=JSON.parse('{"path":"/blogs/Vue/jinjieAPI/xuanranhanshu.html","title":"渲染函数 API","lang":"en-US","frontmatter":{"title":"渲染函数 API","date":"2024/09/09","author":"joker","tags":["前端"],"categories":["Vue"]},"headers":[{"level":2,"title":"h()","slug":"h","link":"#h","children":[]},{"level":2,"title":"mergeProps()","slug":"mergeprops","link":"#mergeprops","children":[]},{"level":2,"title":"cloneVNode()","slug":"clonevnode","link":"#clonevnode","children":[]},{"level":2,"title":"isVNode()","slug":"isvnode","link":"#isvnode","children":[]},{"level":2,"title":"resolveComponent()","slug":"resolvecomponent","link":"#resolvecomponent","children":[]},{"level":2,"title":"resolveDirective()","slug":"resolvedirective","link":"#resolvedirective","children":[]},{"level":2,"title":"withDirectives()","slug":"withdirectives","link":"#withdirectives","children":[]},{"level":2,"title":"withModifiers()","slug":"withmodifiers","link":"#withmodifiers","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"blogs/Vue/进阶API/渲染函数.md"}');export{f as comp,y as data};
